overwrite = TRUE)
}
clipped_rasters
## Shapefile
shp <- sf::st_read('C:/Users/kato_vanpoucke/Documents/qgis/kaartlagen/vlaanderen/Shapefile/RefgewG100.shp')
# Get the CRS of the bioclim data
bioclim_crs <- crs(bioclim[[1]])
# Transform the CRS of the shapefile to match the bioclim data
shapefile_transformed <- st_transform(shp, crs = bioclim_crs)
## Clipping
# Convert sf object to sp object for compatibility with raster package
shapefile_sp <- as(shp, "Spatial")
# Initialize a list to store clipped rasters
clipped_rasters <- list()
# Loop through each bioclimatic layer and clip it
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- bioclim[[i]]
# Clip the raster to the shapefile
clipped_raster <- crop(bio_layer, extent(shapefile_sp))
clipped_raster <- mask(clipped_raster, shapefile_sp)
# Store the clipped raster in the list
clipped_rasters[[i]] <- clipped_raster
}
library(sf)
library(geodata)
library(raster)
library(sf)
## Bioclim variables
bioclim <- geodata::worldclim_country(var='bio', res=10, path='C:/Users/kato_vanpoucke/Downloads', country='BEL')
## Shapefile
shp <- sf::st_read('C:/Users/kato_vanpoucke/Documents/qgis/kaartlagen/vlaanderen/Shapefile/RefgewG100.shp')
# Get the CRS of the bioclim data
bioclim_crs <- crs(bioclim[[1]])
# Transform the CRS of the shapefile to match the bioclim data
shapefile_transformed <- st_transform(shp, crs = bioclim_crs)
## Clipping
# Convert sf object to sp object for compatibility with raster package
shapefile_sp <- as(shp, "Spatial")
# Initialize a list to store clipped rasters
clipped_rasters <- list()
# Loop through each bioclimatic layer and clip it
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- bioclim[[i]]
# Clip the raster to the shapefile
clipped_raster <- crop(bio_layer, extent(shapefile_sp))
clipped_raster <- mask(clipped_raster, shapefile_sp)
# Store the clipped raster in the list
clipped_rasters[[i]] <- clipped_raster
}
## Clipping
# Convert sf object to sp object for compatibility with raster package
shapefile_sp <- as(shapefile_transformed, "Spatial")
# Initialize a list to store clipped rasters
clipped_rasters <- list()
# Loop through each bioclimatic layer and clip it
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- bioclim[[i]]
# Clip the raster to the shapefile
clipped_raster <- crop(bio_layer, extent(shapefile_sp))
clipped_raster <- mask(clipped_raster, shapefile_sp)
# Store the clipped raster in the list
clipped_rasters[[i]] <- clipped_raster
}
## Shapefile
shp <- sf::st_read('C:/Users/kato_vanpoucke/Documents/qgis/kaartlagen/vlaanderen/Shapefile/RefgewG100.shp')
# Get the CRS of the bioclim data
bioclim_crs <- crs(bioclim[[1]])
# Transform the CRS of the shapefile to match the bioclim data
shapefile_transformed <- st_transform(shp, crs = bioclim_crs)
## Clipping
# Convert sf object to sp object for compatibility with raster package
shapefile_sp <- as(shapefile_transformed, "Spatial")
# Initialize a list to store clipped rasters
clipped_rasters <- list()
# Loop through each bioclimatic layer and clip it
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- bioclim[[i]]
# Clip the raster to the shapefile
clipped_raster <- crop(bio_layer, extent(shapefile_sp))
clipped_raster <- mask(clipped_raster, shapefile_sp)
# Store the clipped raster in the list
clipped_rasters[[i]] <- clipped_raster
}
library(terra)
## Clipping
# Convert sf object to SpatVector object for compatibility with terra package
shapefile_vect <- vect(shapefile_transformed)
# Initialize a list to store clipped rasters
clipped_rasters <- list()
# Loop through each bioclimatic layer and clip it
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- bioclim[[i]]
# Clip the raster to the shapefile
clipped_raster <- crop(bio_layer, extent(shapefile_sp))
clipped_raster <- mask(clipped_raster, shapefile_sp)
# Store the clipped raster in the list
clipped_rasters[[i]] <- clipped_raster
}
plot(shapefile[[1]])
plot(shapefile_transformed[[1]])
library(geodata)
library(raster)
library(sf)
library(terra)
## Bioclim variables
bioclim <- geodata::worldclim_country(var='bio', res=10, path='C:/Users/kato_vanpoucke/Downloads', country='BEL')
## Shapefile
shp <- sf::st_read('C:/Users/kato_vanpoucke/Documents/qgis/kaartlagen/vlaanderen/Shapefile/RefgewG100.shp')
# Get the CRS of the bioclim data
bioclim_crs <- crs(bioclim[[1]])
# Transform the CRS of the shapefile to match the bioclim data
shapefile_transformed <- st_transform(shp, crs = bioclim_crs)
## Clipping
# Convert sf object to SpatVector object for compatibility with terra package
shapefile_vect <- vect(shapefile_transformed)
# Initialize a list to store clipped rasters
clipped_rasters <- list()
# Loop through each bioclimatic layer and clip it
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- bioclim[[i]]
# Clip the raster to the shapefile
clipped_raster <- crop(bio_layer, extent(shapefile_sp))
clipped_raster <- mask(clipped_raster, shapefile_sp)
# Store the clipped raster in the list
clipped_rasters[[i]] <- clipped_raster
}
# Loop through each bioclimatic layer and clip it
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- bioclim[[i]]
# Clip the raster to the shapefile
clipped_raster <- crop(bio_layer, extent(shapefile_vect))
clipped_raster <- mask(clipped_raster, shapefile_vect)
# Store the clipped raster in the list
clipped_rasters[[i]] <- clipped_raster
}
library(geodata)
library(raster)
library(sf)
library(terra)
## Bioclim variables
bioclim <- geodata::worldclim_country(var='bio', res=10, path='C:/Users/kato_vanpoucke/Downloads', country='BEL')
## Shapefile
shp <- sf::st_read('C:/Users/kato_vanpoucke/Documents/qgis/kaartlagen/vlaanderen/Shapefile/RefgewG100.shp')
# Get the CRS of the bioclim data
bioclim_crs <- crs(bioclim[[1]])
# Transform the CRS of the shapefile to match the bioclim data
shapefile_transformed <- st_transform(shp, crs = bioclim_crs)
# Initialize a list to store clipped rasters
clipped_rasters <- list()
# Loop through each bioclimatic layer and clip it
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- bioclim[[i]]
# Clip the raster to the shapefile
clipped_raster <- crop(bio_layer, extent(shapefile_transformed))
clipped_raster <- mask(clipped_raster, shapefile_transformed)
# Store the clipped raster in the list
clipped_rasters[[i]] <- clipped_raster
}
# Create a directory to save the clipped rasters
dir.create('C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/clipped_bioclim')
# Save each clipped raster
for (i in 1:19) {
writeRaster(clipped_rasters[[i]],
filename = paste0("clipped_bioclim/bio_", i, ".tif"),
format = "GTiff",
overwrite = TRUE)
}
# Save each clipped raster
for (i in 1:19) {
writeRaster(clipped_rasters[[i]],
filename = paste0("clipped_bioclim/bio_", i, ".tif"),
format = "GTiff",
overwrite = TRUE)
}
?writeRaster
# Save each clipped raster
for (i in 1:19) {
writeRaster(clipped_rasters[[i]],
filename = paste0("clipped_bioclim/bio_", i, ".tif"),
format = "GeoTiff",
overwrite = TRUE)
}
writeRaster(clipped_rasters[[i]],
filename = paste0("clipped_bioclim/bio_", i, ".tif"),
overwrite = TRUE)
# Save each clipped raster
for (i in 1:19) {
writeRaster(clipped_rasters[[i]],
filename = paste0("'C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/clipped_bioclim/bio_", i, ".tif"),
overwrite = TRUE)
}
paste0("'C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/clipped_bioclim/bio_", i, ".tif").
paste0("'C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/clipped_bioclim/bio_", i, ".tif")
clipped_rasters[[i]]
clipped_rasters[[1]]
clipped_rasters[[2]]
clipped_rasters[[3]]
writeRaster(clipped_rasters[[i]],
filename = paste0("C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/clipped_bioclim/bio_", i, ".tif"),
overwrite = TRUE)
# Save each clipped raster
for (i in 1:19) {
writeRaster(clipped_rasters[[i]],
filename = paste0("C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/clipped_bioclim/bio_", i, ".tif"),
overwrite = TRUE)
}
library(ggplot2)
# Install and load necessary packages
# Install and load necessary packages
install.packages(c("terra", "sf", "ggplot2"))
# Define meanings for the bioclim variables
bioclim_meanings <- c(
"Annual Mean Temperature",
"Mean Diurnal Range (Mean of monthly (max temp - min temp))",
"Isothermality (BIO2/BIO7) (* 100)",
"Temperature Seasonality (standard deviation *100)",
"Max Temperature of Warmest Month",
"Min Temperature of Coldest Month",
"Temperature Annual Range (BIO5-BIO6)",
"Mean Temperature of Wettest Quarter",
"Mean Temperature of Driest Quarter",
"Mean Temperature of Warmest Quarter",
"Mean Temperature of Coldest Quarter",
"Annual Precipitation",
"Precipitation of Wettest Month",
"Precipitation of Driest Month",
"Precipitation Seasonality (Coefficient of Variation)",
"Precipitation of Wettest Quarter",
"Precipitation of Driest Quarter",
"Precipitation of Warmest Quarter",
"Precipitation of Coldest Quarter"
)
# Assuming the rasters are already clipped and stored in clipped_rasters
# Create a directory to save the plots
dir.create("bioclim_plots")
# Loop through each bioclimatic layer, plot it, and save the figure
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- clipped_rasters[[i]]
# Convert the raster to a data frame for ggplot
bio_df <- as.data.frame(bio_layer, xy = TRUE)
# Create a ggplot
p <- ggplot() +
geom_raster(data = bio_df, aes(x = x, y = y, fill = bio_df[,3])) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = paste("BIO", i, ":", bioclim_meanings[i]),
fill = "Value",
x = "Longitude",
y = "Latitude")
# Save the plot
ggsave(filename = paste0("bioclim_plots/bio_", i, "_", gsub(" ", "_", tolower(bioclim_meanings[i])), ".png"),
plot = p, width = 10, height = 6)
}
# Assuming the rasters are already clipped and stored in clipped_rasters
# Create a directory to save the plots
dir.create('C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/bioclim_plots')
# Define meanings for the bioclim variables
bioclim_meanings <- c(
"Annual Mean Temperature",
"Mean Diurnal Range (Mean of monthly (max temp - min temp))",
"Isothermality (BIO2/BIO7) (* 100)",
"Temperature Seasonality (standard deviation *100)",
"Max Temperature of Warmest Month",
"Min Temperature of Coldest Month",
"Temperature Annual Range (BIO5-BIO6)",
"Mean Temperature of Wettest Quarter",
"Mean Temperature of Driest Quarter",
"Mean Temperature of Warmest Quarter",
"Mean Temperature of Coldest Quarter",
"Annual Precipitation",
"Precipitation of Wettest Month",
"Precipitation of Driest Month",
"Precipitation Seasonality (Coefficient of Variation)",
"Precipitation of Wettest Quarter",
"Precipitation of Driest Quarter",
"Precipitation of Warmest Quarter",
"Precipitation of Coldest Quarter"
)
# Loop through each bioclimatic layer, plot it, and save the figure
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- clipped_rasters[[i]]
# Convert the raster to a data frame for ggplot
bio_df <- as.data.frame(bio_layer, xy = TRUE)
# Create a ggplot
p <- ggplot() +
geom_raster(data = bio_df, aes(x = x, y = y, fill = bio_df[,3])) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = paste("BIO", i, ":", bioclim_meanings[i]),
fill = "Value",
x = "Longitude",
y = "Latitude")
# Save the plot
# Save the plot
ggsave(filename = paste0("C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/bioclim_plots/bio_", i, "_", gsub(" ", "_", tolower(bioclim_meanings[i])), ".png"),
plot = p, width = 10, height = 6)
}
# Loop through each bioclimatic layer, plot it, and save the figure
for (i in 1:19) {
# Get the ith bioclimatic layer
bio_layer <- clipped_rasters[[i]]
# Convert the raster to a data frame for ggplot
bio_df <- as.data.frame(bio_layer, xy = TRUE)
# Create a ggplot
p <- ggplot() +
geom_raster(data = bio_df, aes(x = x, y = y, fill = bio_df[,3])) +
scale_fill_viridis_c() +
theme_minimal() +
labs(title = paste("BIO", i, ":", bioclim_meanings[i]),
fill = "Value",
x = "Longitude",
y = "Latitude")
# Save the plot
# Save the plot
ggsave(filename = paste0("C:/Users/kato_vanpoucke/Documents/qgis/projecten/fwo/bioclim_plots/bio_", i, ".png"),
plot = p, width = 10, height = 6)
}
plot(clipped_raster[[1]])
plot(clipped_raster[[5]])
plot(clipped_rasters[[5]])
?plot
terra::plot(clipped_rasters[[1]])
terra::plot(clipped_rasters[[1]], axes=FALSE)
terra::plot(clipped_rasters[[1]], axes=FALSE, legend=FALSE)
terra::plot(clipped_rasters[[5]], axes=FALSE, legend=FALSE)
terra::plot(clipped_rasters[[12]], axes=FALSE, legend=FALSE)
terra::plot(clipped_rasters[[13]], axes=FALSE, legend=FALSE)
terra::plot(clipped_rasters[[15]], axes=FALSE, legend=FALSE)
install packages(sen2r)
install.packages(sen2r)
install.packages(sen2r)
install.packages('sen2r')
install.packages(osmdata)
install.packages('osmdata')
library(osmdata)
library(sf)
?opq
# Define the area of interest
area <- "Brussels, BEL"
# Create an Overpass query
query <- opq(area) %>%
add_osm_feature(key = 'barrier', value = 'hedge')
# Get the data
data <- osmdata_sf(query)
query
# Get the data
data <- osmdata_sf(query)
# Extract and plot
hedges <- data$osm_lines
plot(st_geometry(hedges))
hedges
getbb('Brussels')
# Define the area of interest
area <- getbb('Brussels')
# Create an Overpass query
query <- opq(area) %>%
add_osm_feature(key = 'barrier', value = 'hedge')
# Get the data
data <- osmdata_sf(query)
# Extract and plot
hedges <- data$osm_lines
plot(st_geometry(hedges))
# Define the area of interest
area <- getbb('Leuven')
# Create an Overpass query
query <- opq(area) %>%
add_osm_feature(key = 'barrier', value = 'hedge')
# Get the data
data <- osmdata_sf(query)
# Extract and plot
hedges <- data$osm_lines
plot(st_geometry(hedges))
st_export(hedges)
?st_export
st_write(hedges)
?st_write
st_write(hedges, driver='geojson')
st_write(hedges, layer = 'hedges', driver='geojson')
st_write(hedges, layer = 'hedges')
?add_osm_feature
library(osmdata)
library(sf)
?add_osm_feature
# Define the area of interest
area <- getbb('Flanders')
# Create an Overpass query
query <- opq(area) %>%
add_osm_feature(key = 'orchard', value = 'meadow_orchard')
# Get the data
data <- osmdata_sf(query)
# Extract and plot
hedges <- data$osm_lines
plot(st_geometry(hedges))
hedges
library(osmdata)
library(sf)
# Define the area of interest
area <- getbb('Flanders')
# Create an Overpass query
query <- opq(area) %>%
add_osm_feature(key = 'orchard', value = '*')
# Get the data
data <- osmdata_sf(query)
# Extract and plot
hedges <- data$osm_lines
plot(st_geometry(hedges))
# Create an Overpass query
query <- opq(area) %>%
add_osm_feature(key = 'orchard', value = *)
# Create an Overpass query
query <- opq(area) %>%
add_osm_feature(key = 'landuse', value = 'orchard')
# Get the data
data <- osmdata_sf(query)
# Extract and plot
hedges <- data$osm_lines
plot(st_geometry(hedges))
hedges
library(inborutils)
library(sf)
library(dplyr)
library(qgisprocess)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
print(getwd())
#---- Functions ----
download_from_zenodo <- function(download_path, zenodo_doi, file_name) {
# Create the full file path
file_path <- file.path(download_path, file_name)
# Check if the file already exists in the download directory
if (file.exists(file_path)) {
print("File already exists at the specified path.")
} else {
# Download the file if it doesn't exist
inborutils::download_zenodo(
doi = zenodo_doi,
path = download_path
)
print('File was downloaded')
}
}
telpunt_to_telcirkel <- function(input_csv, buffer_distance = 300) {
# Step 1: Read the CSV file into a dataframe
df_pts <- read.csv(input_csv)
# Step 2: Create an sf object with 'geometry' column based on the coordinates (assuming x and y coordinates are in 'x_coord' and 'y_coord')
df_pts <- df_pts %>%
st_as_sf(coords = c('x_coord', 'y_coord'), crs = df_pts$crs[1])
# Step 3: Buffer the points by the specified distance (default 300 meters)
df_pts_buffered <- st_buffer(df_pts, dist = buffer_distance)
# Step 4: Write to file
#make if else
# Step 5: Return points
return(df_pts_buffered)
}
intersect_parcels <- function(layer_name, telcirkels) {
# Read in the fields
parcels <- st_read(
file.path(Q_schijf, paste0(layer_name, '.gpkg')),
layer = layer_name,
query = paste0("SELECT REF_ID, GRAF_OPP, GWSGRPH_LB, LANDBSTR, jaar, geom FROM ", layer_name) #, " LIMIT 500"
)
# Weglaten van landbouwinfrastructuur uit parcels (hiervoor willen we geen tijdsreeksen)
parcels_subset <- parcels |>
filter(GWSGRPH_LB != 'Landbouwinfrastructuur')
# QGIS processing
# 1) Intersection fields
result <- qgis_run_algorithm(
algorithm = 'native:intersection',
INPUT = parcels_subset,
OVERLAY = telcirkels,
.quiet = TRUE
)
# 2) Assign pointid to the parcels
result <- qgis_run_algorithm(
"native:joinattributesbylocation",
INPUT = result$OUTPUT,
JOIN = telcirkels,
PREDICATE = 'contain',
JOIN_FIELDS = 'pointid',
METHOD = 0, # for every match, create a separate geometry
OUTPUT = file.path(Q_schijf_output, paste0(layer_name, '_clip', '.gpkg')),
.quiet = TRUE
)
# 3) Buffer (to remove line geometries)
result <- qgis_run_algorithm(
"native:buffer",
INPUT = result$OUTPUT,
DISTANCE = -2
) |>
st_as_sf() |>
filter(!st_is_empty(geom)) #filter empty geometries
buffer_result <- qgis_run_algorithm(
"native:buffer",
INPUT = result,
DISTANCE = 2,
OUTPUT = file.path(Q_schijf_output, paste0(layer_name, '_clip', '.gpkg'))
)
}
# Omzetten van de telpunten naar telcirkels(buffer)
input_csv <- "../data/raw/steekproef_mbag_mas.csv"
df_tc <- telpunt_to_telcirkel(input_csv, buffer_distance = 300)
st_write(df_tc, '../data/processed')
st_write(df_tc, '../data/processed/steekproef_mbag_mas.gpkg')
